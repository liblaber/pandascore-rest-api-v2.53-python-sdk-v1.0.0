# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .utils.base_model import BaseModel


@JsonMap({})
class CsgoMatchPlayer(BaseModel):
    """Player's data for a CSGO Match

    :param assists: Player's number of kill assists for a game
    :type assists: int
    :param deaths: Player's number of deaths
    :type deaths: int
    :param first_name: First name of the player. `null` if unknown
    :type first_name: str
    :param headshots: Player's number of headshots
    :type headshots: int
    :param image_url: URL to the photo of the player. `null` if not available.
    :type image_url: str
    :param kills: Player's number of kills
    :type kills: int
    :param last_name: Last name of the player. `null` if unknown
    :type last_name: str
    :param name: Professional name of the player
    :type name: str
    :param nationality: Country code matching the nationality of the player according to the ISO 3166-1 standard (Alpha-2 code). <br/>In addition to the standard, the `XK` code is used for Kosovo. <br/>`null` if unknown
    :type nationality: str
    :param number_of_games: Number of games
    :type number_of_games: int
    :param player_id: ID of the player
    :type player_id: int
    :param slug: Unique, human-readable identifier for the player. <br/>`id` and `slug` can be used interchangeably throughout the API.
    :type slug: str
    """

    def __init__(
        self,
        assists: int,
        deaths: int,
        first_name: str,
        headshots: int,
        image_url: str,
        kills: int,
        last_name: str,
        name: str,
        nationality: str,
        number_of_games: int,
        player_id: int,
        slug: str,
    ):
        """Player's data for a CSGO Match

        :param assists: Player's number of kill assists for a game
        :type assists: int
        :param deaths: Player's number of deaths
        :type deaths: int
        :param first_name: First name of the player. `null` if unknown
        :type first_name: str
        :param headshots: Player's number of headshots
        :type headshots: int
        :param image_url: URL to the photo of the player. `null` if not available.
        :type image_url: str
        :param kills: Player's number of kills
        :type kills: int
        :param last_name: Last name of the player. `null` if unknown
        :type last_name: str
        :param name: Professional name of the player
        :type name: str
        :param nationality: Country code matching the nationality of the player according to the ISO 3166-1 standard (Alpha-2 code). <br/>In addition to the standard, the `XK` code is used for Kosovo. <br/>`null` if unknown
        :type nationality: str
        :param number_of_games: Number of games
        :type number_of_games: int
        :param player_id: ID of the player
        :type player_id: int
        :param slug: Unique, human-readable identifier for the player. <br/>`id` and `slug` can be used interchangeably throughout the API.
        :type slug: str
        """
        self.assists = self._define_number("assists", assists, nullable=True, ge=0)
        self.deaths = self._define_number("deaths", deaths, nullable=True, ge=0)
        self.first_name = self._define_str("first_name", first_name, nullable=True)
        self.headshots = self._define_number(
            "headshots", headshots, nullable=True, ge=0
        )
        self.image_url = self._define_str("image_url", image_url, nullable=True)
        self.kills = self._define_number("kills", kills, nullable=True, ge=0)
        self.last_name = self._define_str("last_name", last_name, nullable=True)
        self.name = name
        self.nationality = self._define_str("nationality", nationality, nullable=True)
        self.number_of_games = self._define_number(
            "number_of_games", number_of_games, ge=0
        )
        self.player_id = self._define_number("player_id", player_id, ge=1)
        self.slug = self._define_str(
            "slug", slug, nullable=True, pattern="^[a-z0-9_-]+$", min_length=1
        )

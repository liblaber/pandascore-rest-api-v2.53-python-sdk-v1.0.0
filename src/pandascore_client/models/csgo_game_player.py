# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .base_opponent import BaseOpponent, BaseOpponentGuard
from .base_player import BasePlayer
from .base_team import BaseTeam


@JsonMap({})
class CsgoGamePlayer(BaseModel):
    """Player's data for a game

    :param adr: Player's average damage per round
    :type adr: float
    :param assists: Player's number of kill assists for a game
    :type assists: int
    :param deaths: Player's number of deaths
    :type deaths: int
    :param first_kills_diff: First kill difference
    :type first_kills_diff: int
    :param flash_assists: Player's number of flash assists for a game
    :type flash_assists: float
    :param game_id: Counter-Strike game ID
    :type game_id: int
    :param headshots: Player's number of headshots
    :type headshots: int
    :param k_d_diff: Player's kills deaths difference for a game
    :type k_d_diff: int
    :param kast: Percentage of rounds in which the player either had a kill, assist, survived or was traded
    :type kast: float
    :param kills: Player's number of kills
    :type kills: int
    :param opponent: opponent
    :type opponent: BaseOpponent
    :param player: player
    :type player: BasePlayer
    :param rating: rating
    :type rating: float
    :param team: team
    :type team: BaseTeam
    """

    def __init__(
        self,
        adr: float,
        assists: int,
        deaths: int,
        first_kills_diff: int,
        flash_assists: float,
        game_id: int,
        headshots: int,
        k_d_diff: int,
        kast: float,
        kills: int,
        opponent: BaseOpponent,
        player: BasePlayer,
        rating: float,
        team: BaseTeam,
    ):
        """Player's data for a game

        :param adr: Player's average damage per round
        :type adr: float
        :param assists: Player's number of kill assists for a game
        :type assists: int
        :param deaths: Player's number of deaths
        :type deaths: int
        :param first_kills_diff: First kill difference
        :type first_kills_diff: int
        :param flash_assists: Player's number of flash assists for a game
        :type flash_assists: float
        :param game_id: Counter-Strike game ID
        :type game_id: int
        :param headshots: Player's number of headshots
        :type headshots: int
        :param k_d_diff: Player's kills deaths difference for a game
        :type k_d_diff: int
        :param kast: Percentage of rounds in which the player either had a kill, assist, survived or was traded
        :type kast: float
        :param kills: Player's number of kills
        :type kills: int
        :param opponent: opponent
        :type opponent: BaseOpponent
        :param player: player
        :type player: BasePlayer
        :param rating: rating
        :type rating: float
        :param team: team
        :type team: BaseTeam
        """
        self.adr = self._define_number("adr", adr, nullable=True, ge=0)
        self.assists = self._define_number("assists", assists, nullable=True, ge=0)
        self.deaths = self._define_number("deaths", deaths, nullable=True, ge=0)
        self.first_kills_diff = self._define_number(
            "first_kills_diff", first_kills_diff, nullable=True
        )
        self.flash_assists = self._define_number(
            "flash_assists", flash_assists, nullable=True, ge=0
        )
        self.game_id = self._define_number("game_id", game_id, ge=1)
        self.headshots = self._define_number(
            "headshots", headshots, nullable=True, ge=0
        )
        self.k_d_diff = self._define_number("k_d_diff", k_d_diff, nullable=True)
        self.kast = self._define_number("kast", kast, nullable=True, ge=0)
        self.kills = self._define_number("kills", kills, nullable=True, ge=0)
        self.opponent = BaseOpponentGuard.return_one_of(opponent)
        self.player = self._define_object(player, BasePlayer)
        self.rating = self._define_number("rating", rating, nullable=True, ge=0)
        self.team = self._define_object(team, BaseTeam)
